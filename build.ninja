cflags = -Wall -Werror -Wextra -ansi -pedantic -std=c99 -fsanitize=address,undefined
headers = -Isrc

rule cc
    deps = gcc
    depfile = $out.d
    command = gcc -MD -MF $out.d $headers $cflags -c $in -o $out

rule link
    command = gcc $in -o $out -g -fsanitize=address,undefined

rule clean
    command = rm build/*

rule run-test
    command = build/test > /dev/null

rule run-main
    command = build/main

build main: phony build/main
build build/main.o: cc src/main.c
build build/input_parser.o: cc src/input_parser.c
build build/commands.o: cc src/commands.c
build build/rooms.o: cc src/rooms.c
build build/entry.o: cc src/entry.c
build build/hero.o: cc src/hero.c
build build/main: link $
    build/main.o $
    build/input_parser.o $
    build/commands.o $
    build/entry.o $
    build/hero.o

build test: phony build/test
build build/test.o: cc test/test.c
    cflags = -Itest $cflags -DTEST
build build/extra_test.o: cc test/extra_test.c
    cflags = -Itest $cflags -DSILENT -DTEST
build build/input_parser_test.o: cc src/input_parser.c
    cflags = -Itest $cflags -DSILENT -DTEST
build build/commands_silent.o: cc src/commands.c
    cflags = -Itest $cflags -DSILENT -DTEST
build build/entry_test.o: cc src/entry.c
    cflags = -Itest $cflags -DSILENT -DTEST
build build/hero_test.o: cc src/hero.c
    cflags = -Itest $cflags -DSILENT -DTEST

build build/test: link $
    build/test.o $
    build/extra_test.o $
    build/input_parser_test.o $
    build/commands_silent.o $
    build/entry_test.o $
    build/hero_test.o

build clean: clean
build run-test: run-test || test

default main test run-test
